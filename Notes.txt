- signed: A signed integer can hold both negative and positive numbers.
- unsigned: An unsigned integer can hold only positive values.
- short: Half of the default size.
- long: Twice the default size.
- float is 4 bytes
- double is 8
- long double can be equivalent to a double (8 bytes), or 16 bytes.
- ampersand: & - pointer
- Pointer assingnment: int* ptr = &var;
- Address-of operator (&): returns the memory address of its operand.
- Contents-of (or dereference) operator (*): returns the value of the variable located at the address specified by its operand.
- The stack: All local variables take up memory from the stack.
- The heap: Unused program memory that can be used when the program dynamically allocate the memory.
- new: returns the address of the space allocated.
---
- allocate memory at run time within the heap for the variable of a given type using the 'new' operator, 
which returns the address of the space allocated:
    
    new int;
    * This allocates the memory size necessary for storing an integer on the heap, and returns that address.
        - allocated addresses can be stored in a pointer, which can then be dereferenced (*) to access the variable.
    
    int *p = new int;
    *p = 5;
    * We have dynamically allocated memory for an integer, and assigned it a value of 5.
    * The pointer p is stored in the stack as a local variable.
        * This holds the heap's allocated address as its value.
        * The value of 5 is stored at that address in the heap.
        
- Local variables on the stack, managing it's memory automatically.
- On the heap, it's necessary to manually handle the dynamically allocated memory:
    - use the 'delete' operator to free up the memory when it's no longer needed.
    - Release pointed memory:
        int *p = new int; // request memory
        *p = 5;           // store value
        delete p;         // free up the memory
        - The delete operator frees up the memory allocated for the variable.
        - It does not delete the pointer itself, as the pointer is stored on the stack.
        * Pointers that are left pointing to non-existent memory locations are called dangling pointers.
    - Example: 
        int *p = new int;
        *p = 5
        delete p;
        // p is now a dangling pointer
        p = new int;      // reuse for a new address
        - It's a good practice to assign NULL to a pointer variable when you declare it, in case you do not have exact address to be assigned
            * A pointer assigned NULL is called a null pointer.
    - Delete array memory allocation:
        int *p = NULL;
        p = new int[20];
        delete [] p;
    
    - Dynamic memory allocation is useful in many situations, such as when your program depends on input, fx:
        when your program needs to read an image file, it doesn't know in advance the size of the image file and the memory necessary to store the image.
